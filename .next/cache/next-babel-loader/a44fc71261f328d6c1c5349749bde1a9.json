{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';\nimport cookie from 'cookie';\nexport const getClient = (req = null) => {\n  let serverToken = ''; // if(req){\n  //   serverToken = cookie.parse(req.headers.cookie || '').token\n  // }else{\n  //   serverToken = token\n  // }\n\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({\n      headers: {\n        authorization: serverToken\n      },\n      uri: 'http://localhost:5000'\n    }),\n    ssrMode: true,\n    name: 'credicity-web-client',\n    version: '1.0',\n    queryDeduplication: false,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy: 'cache-and-network'\n      }\n    }\n  });\n  return client;\n};","map":{"version":3,"sources":["C:/Users/Abiodun Michael/Desktop/chainmedic/front/graphql/client.js"],"names":["ApolloClient","InMemoryCache","HttpLink","cookie","getClient","req","serverToken","client","cache","link","headers","authorization","uri","ssrMode","name","version","queryDeduplication","defaultOptions","watchQuery","fetchPolicy"],"mappings":"AAAA,SAASA,YAAT,EAAsBC,aAAtB,EAAoCC,QAApC,QAAoD,gBAApD;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,GAAG,GAAG,IAAP,KAAc;AAEvC,MAAIC,WAAW,GAAE,EAAjB,CAFuC,CAGvC;AACA;AACA;AACA;AACA;;AAEE,QAAMC,MAAM,GAAG,IAAIP,YAAJ,CAAiB;AAC9BQ,IAAAA,KAAK,EAAC,IAAIP,aAAJ,EADwB;AAE9BQ,IAAAA,IAAI,EAAE,IAAIP,QAAJ,CAAa;AACjBQ,MAAAA,OAAO,EAAC;AACNC,QAAAA,aAAa,EAACL;AADR,OADS;AAIjBM,MAAAA,GAAG,EAAC;AAJa,KAAb,CAFwB;AAO9BC,IAAAA,OAAO,EAAC,IAPsB;AAQ9BC,IAAAA,IAAI,EAAE,sBARwB;AAS9BC,IAAAA,OAAO,EAAE,KATqB;AAU9BC,IAAAA,kBAAkB,EAAE,KAVU;AAW9BC,IAAAA,cAAc,EAAE;AACdC,MAAAA,UAAU,EAAE;AACVC,QAAAA,WAAW,EAAE;AADH;AADE;AAXc,GAAjB,CAAf;AAkBA,SAAOZ,MAAP;AACD,CA5BM","sourcesContent":["import { ApolloClient,InMemoryCache,HttpLink } from '@apollo/client';\r\nimport cookie from 'cookie'\r\n\r\nexport const getClient = (req = null)=>{\r\n\r\nlet serverToken =''\r\n// if(req){\r\n//   serverToken = cookie.parse(req.headers.cookie || '').token\r\n// }else{\r\n//   serverToken = token\r\n// }\r\n\r\n  const client = new ApolloClient({\r\n    cache:new InMemoryCache(),\r\n    link: new HttpLink({\r\n      headers:{\r\n        authorization:serverToken,\r\n      },    \r\n      uri:'http://localhost:5000'}),\r\n    ssrMode:true,\r\n    name: 'credicity-web-client',\r\n    version: '1.0',\r\n    queryDeduplication: false,\r\n    defaultOptions: {\r\n      watchQuery: {\r\n        fetchPolicy: 'cache-and-network',\r\n      },\r\n    },\r\n  })\r\n\r\n  return client\r\n}\r\n\r\n  \r\n\r\n"]},"metadata":{},"sourceType":"module"}